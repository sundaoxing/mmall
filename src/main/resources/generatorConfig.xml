<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<!--mybatis-generator插件配置，
    主要使用该插件自动生成pojo和mappers-->
<generatorConfiguration>
    <!-- 引入配置文件 -->
    <properties resource="datasource.properties"/>

    <!-- 指定数据库jdbc驱动和jar包的位置 -->
    <classPathEntry location="${db.driverLocation}" />

    <!-- 一个数据库一个context -->
    <context id="default" targetRuntime="MyBatis3">
        <!-- optional,旨在创建class时，对注释进行控制 -->
        <commentGenerator >
            <property name="suppressDate" value="true"/><!-- 是否取消注释 -->
            <property name="suppressAllComments" value="true" /> <!-- 是否生成注释代时间戳-->
        </commentGenerator>

        <!-- jdbc连接 -->
        <jdbcConnection
                driverClass="${db.driverClassName}"
                connectionURL="${db.url}"
                userId="${db.username}"
                password="${db.password}" />

        <!--非必需，类型处理器 ，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <!-- 是否使用bigDecimal， false可自动转化以下类型（Long, Integer, Short, etc.） -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- Model模型生成器，用来生成含有主键key的类，记录类以及查询Example类
             targetPackage    指定生成的model生成所在的包名
             targetProject     指定在该项目下所在的路径
        -->
        <!--javaModelGenerator targetPackage="com.mmall.pojo"
            targetProject="./src/main/java"-->
        <javaModelGenerator targetPackage="com.mmall.pojo"
                            targetProject="./src/main/java" >
            <!-- 是否允许子包，即targetPackage.schemaName.tableName-->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对model添加构造函数-->
            <property name="constructorBased" value="true" />
            <!-- 是否针对CHAR类型的列的数据进行trim操作,即去除前后空格 -->
            <property name="trimStrings" value="true"/>
            <!-- 建立model对象是否不可改变，即model对象有没有setter方法-->
            <property name="immutable" value="false" />
        </javaModelGenerator>

        <!-- mapper映射文件生成所在的目录，为每一个数据库的表生成所对应的SQLMap文件 -->
        <!--sqlMapGenerator targetPackage="mappers"
            targetProject="./src/main/resources"-->
        <sqlMapGenerator targetPackage="mappers"
                         targetProject="./src/main/resources" >
            <!-- 是否允许子包，即targetPackage.schemaName.tableName-->
            <property name="enableSubPackages" value="false" />
        </sqlMapGenerator>

        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件的代码，即dao层
                type="ANNOTATEDMAPPER",生成java Model和基于注解的Mapper对象
                type="MIXEDMAPPER",生成基于注解的java Model和相应的Mapper对象
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口-->
        <!-- targetPackage:mapper接口dao生成的位置-->
        <javaClientGenerator targetPackage="com.mmall.dao"
                             targetProject="./src/main/java"
                             type="XMLMAPPER" >
            <!-- 是否允许子包，即targetPackage.schemaName.tableName-->
            <property name="enableSubPackages" value="false" />
        </javaClientGenerator>

        <!-- 配置表相关信息：数据库中有多少张表就配置几个<table>节点
             tableName:对应的数据库表
             domainObjectName:要生成的实体类
             enable*ByExample:否生成 example类   -->
        <table tableName="mmall_shipping"
               domainObjectName="Shipping"
               enableCountByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
        </table>

        <table tableName="mmall_cart"
               domainObjectName="Cart"
               enableCountByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
        </table>

        <table tableName="mmall_category"
               domainObjectName="Category"
               enableCountByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
        </table>

        <table tableName="mmall_order"
               domainObjectName="Order"
               enableCountByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
        </table>

        <table tableName="mmall_order_item"
               domainObjectName="OrderItem"
               enableCountByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
        </table>

        <table tableName="mmall_pay_info"
               domainObjectName="PayInfo"
               enableCountByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
        </table>

        <table tableName="mmall_product"
               domainObjectName="Product"
               enableCountByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
            <!-- 忽略列，不生成bean字段 <ignoreColumn column="FRED" />-->
            <!-- 指定列的java数据类型 <columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" /> -->
            <columnOverride column="detail" jdbcType="VARCHAR" />
            <columnOverride column="sub_images" jdbcType="VARCHAR" />
        </table>

        <table tableName="mmall_user"
               domainObjectName="User"
               enableCountByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               enableUpdateByExample="false">
        </table>
    </context>
</generatorConfiguration>